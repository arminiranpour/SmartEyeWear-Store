@{
    ViewData["Title"] = "Scan Face";
}

<h2>Scan your face</h2>

<!-- آپلود عکس -->
<input type="file" id="uploadImage" accept="image/*" />

<!-- یا استفاده از دوربین -->
<video id="video" width="400" autoplay></video>
<button id="snap">Capture</button>
<canvas id="canvas" width="400" height="300" style="display:none;"></canvas>

<!-- نمایش نتایج -->
<div id="results" style="margin-top:20px;">
    <p><strong>Face Shape:</strong> <span id="faceShapeResult">-</span></p>
    <p><strong>Skin Tone:</strong> <span id="skinToneResult">-</span></p>
</div>

<form id="scanForm" method="post" asp-controller="Scan" asp-action="SavePhoto">
    <input type="hidden" id="faceShape" name="faceShape" />
    <input type="hidden" id="skinTone" name="skinTone" />
    <button type="submit">Submit to DB</button>
</form>

@section Scripts {
    <script defer src="https://cdn.jsdelivr.net/npm/face-api.js@0.22.2/dist/face-api.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", async function () {
            await faceapi.nets.tinyFaceDetector.loadFromUri('/models');
            await faceapi.nets.faceLandmark68Net.loadFromUri('/models');

            const video = document.getElementById('video');
            const canvas = document.getElementById('canvas');
            const context = canvas.getContext('2d');
            const snap = document.getElementById('snap');

            navigator.mediaDevices.getUserMedia({ video: true })
                .then(stream => video.srcObject = stream)
                .catch(err => console.error("Error accessing camera:", err));

            snap.addEventListener("click", async () => {
                context.drawImage(video, 0, 0, 400, 300);
                await processImage(canvas);
            });

            document.getElementById('uploadImage').addEventListener('change', function (e) {
                const file = e.target.files[0];
                if (!file) return;

                const img = new Image();
                img.src = URL.createObjectURL(file);
                img.onload = async function () {
                    canvas.width = img.width;
                    canvas.height = img.height;
                    context.drawImage(img, 0, 0, img.width, img.height);
                    await processImage(canvas);
                };
            });

            async function processImage(canvas) {
                const shape = await detectFaceShape(canvas);
                const skinTone = getSkinToneHex(canvas);

                document.getElementById('faceShapeResult').innerText = shape;
                document.getElementById('skinToneResult').innerText = skinTone;

                document.getElementById('faceShape').value = shape;
                document.getElementById('skinTone').value = skinTone;
            }

            async function detectFaceShape(canvas) {
                const detections = await faceapi.detectSingleFace(canvas, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks();
                if (!detections) return "Unknown";

                const landmarks = detections.landmarks;
                const jaw = landmarks.getJawOutline();
                const jawWidth = distance(jaw[0], jaw[16]);
                const faceHeight = distance(jaw[8], landmarks.positions[27]);
                const ratio = jawWidth / faceHeight;

                if (ratio > 1.5) return "Square";
                else if (ratio < 1.0) return "Long";
                else return "Oval";
            }

            function distance(p1, p2) {
                return Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2);
            }

            function getSkinToneHex(canvas) {
                const ctx = canvas.getContext('2d');
                const data = ctx.getImageData(0, 0, canvas.width, canvas.height).data;
                let r = 0, g = 0, b = 0, count = 0;

                for (let i = 0; i < data.length; i += 4) {
                    const red = data[i];
                    const green = data[i + 1];
                    const blue = data[i + 2];
                    const alpha = data[i + 3];
                    if (alpha !== 0) {
                        r += red;
                        g += green;
                        b += blue;
                        count++;
                    }
                }

                if (count === 0) return "#cccccc";
                r = Math.round(r / count);
                g = Math.round(g / count);
                b = Math.round(b / count);

                return rgbToHex(r, g, b);
            }

            function rgbToHex(r, g, b) {
                return "#" + [r, g, b].map(x => x.toString(16).padStart(2, '0')).join('');
            }
        });
    </script>
}


